/**
 * @import { Program } from 'estree'
 * @import { Plugin } from 'unified'
 */

import { createVisitors } from 'estree-util-scope'
import { walk } from 'estree-walker'
import { define } from 'unist-util-mdx-define'

/**
 * @typedef {RegExp | string | ((value: string) => boolean)} Test
 */

/**
 * @typedef RecmaNextjsStaticPropsOptions
 * @property {string} [name='getStaticProps']
 *   The name of the export to generate.
 * @property {Test[]} [include]
 *   A list to filter identifiers to include in the generated function.
 *
 *   This list may include strings which must be matched exactly, a regular expression to test
 *   against, or a function that will be called with the value to test, and must return a boolean.
 *   By default everything will be included.
 * @property {Test[]} [exclude]
 *   The same as `include`, but matching values will be excluded instead.
 */

/**
 * Check if a value matches a test.
 *
 * @param {Test} test
 *   The test to match.
 * @param {string} value
 *   The value to match against the test.
 * @returns {boolean}
 *   Whether or not the value matches the test.
 */
function passTest(test, value) {
  if (typeof test === 'string') {
    return value === test
  }
  if (test instanceof RegExp) {
    return test.test(value)
  }
  return test(value)
}

/**
 * A recma plugin which exposes variables from the top-level scope in Next.js through
 * `getStaticProps`.
 *
 * @type {Plugin<[RecmaNextjsStaticPropsOptions?], Program>}
 */
const recmaNextjsStaticProps =
  ({ exclude, include, name = 'getStaticProps' } = {}) =>
  (ast, file) => {
    const visitors = createVisitors()

    walk(ast, {
      enter(node) {
        if (
          node.type === 'ArrowFunctionExpression' ||
          node.type === 'ClassDeclaration' ||
          node.type === 'ClassExpression' ||
          node.type === 'FunctionDeclaration' ||
          node.type === 'FunctionExpression'
        ) {
          this.skip()
          return
        }

        visitors.enter(node)
      },

      leave: visitors.exit
    })

    const identifiers = visitors.scopes[0].defined.filter((id) => {
      // Always filter JSX functions generated by MDX.
      if (id === '_jsx' || id === '_jsxs' || id === '_Fragment') {
        return false
      }

      if (exclude && exclude.some((test) => passTest(test, id))) {
        return false
      }

      if (include && !include.some((test) => passTest(test, id))) {
        return false
      }

      return true
    })

    if (!identifiers.length) {
      return
    }

    define(
      ast,
      file,
      {
        [name]: {
          type: 'ArrowFunctionExpression',
          expression: true,
          params: [],
          body: {
            type: 'ObjectExpression',
            properties: [
              {
                type: 'Property',
                method: false,
                shorthand: false,
                computed: false,
                kind: 'init',
                key: { type: 'Identifier', name: 'props' },
                value: {
                  type: 'CallExpression',
                  optional: false,
                  callee: {
                    type: 'MemberExpression',
                    computed: false,
                    optional: false,
                    object: { type: 'Identifier', name: 'JSON' },
                    property: { type: 'Identifier', name: 'parse' }
                  },
                  arguments: [
                    {
                      type: 'CallExpression',
                      optional: false,
                      callee: {
                        type: 'MemberExpression',
                        computed: false,
                        optional: false,
                        object: { type: 'Identifier', name: 'JSON' },
                        property: { type: 'Identifier', name: 'stringify' }
                      },
                      arguments: [
                        {
                          type: 'ObjectExpression',
                          properties: identifiers.sort().map((id) => ({
                            type: 'Property',
                            method: false,
                            shorthand: true,
                            computed: false,
                            kind: 'init',
                            key: { type: 'Identifier', name: id },
                            value: { type: 'Identifier', name: id }
                          }))
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      { conflict: 'skip' }
    )
  }

export default recmaNextjsStaticProps
